#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß± –¢–µ—Ç—Ä–∏—Å –≤ –∫–æ–Ω—Å–æ–ª–∏ (Console Tetris)
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ "–¢–µ—Ç—Ä–∏—Å" –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
"""

import random
import time
import os
import keyboard
from threading import Thread
import queue

class TetrisGame:
    def __init__(self):
        self.width = 10
        self.height = 20
        self.board = [[0 for _ in range(self.width)] for _ in range(self.height)]
        self.score = 0
        self.lines_cleared = 0
        self.level = 1
        self.game_over = False
        self.input_queue = queue.Queue()
        
        # –¢–µ—Ç—Ä–∏–º–∏–Ω–æ (—Ñ–∏–≥—É—Ä—ã)
        self.tetrominoes = {
            'I': [['.....',
                   '..#..',
                   '..#..',
                   '..#..',
                   '..#..'],
                  ['.....',
                   '.....',
                   '####.',
                   '.....',
                   '.....']],
            
            'O': [['.....',
                   '.....',
                   '.##..',
                   '.##..',
                   '.....']],
            
            'T': [['.....',
                   '.....',
                   '.#...',
                   '###..',
                   '.....'],
                  ['.....',
                   '.....',
                   '.#...',
                   '.##..',
                   '.#...'],
                  ['.....',
                   '.....',
                   '.....',
                   '###..',
                   '.#...'],
                  ['.....',
                   '.....',
                   '.#...',
                   '##...',
                   '.#...']],
            
            'S': [['.....',
                   '.....',
                   '.##..',
                   '##...',
                   '.....'],
                  ['.....',
                   '.#...',
                   '.##..',
                   '..#..',
                   '.....']],
            
            'Z': [['.....',
                   '.....',
                   '##...',
                   '.##..',
                   '.....'],
                  ['.....',
                   '..#..',
                   '.##..',
                   '.#...',
                   '.....']],
            
            'J': [['.....',
                   '.#...',
                   '.#...',
                   '##...',
                   '.....'],
                  ['.....',
                   '.....',
                   '#....',
                   '###..',
                   '.....'],
                  ['.....',
                   '.##..',
                   '.#...',
                   '.#...',
                   '.....'],
                  ['.....',
                   '.....',
                   '###..',
                   '..#..',
                   '.....']],
            
            'L': [['.....',
                   '..#..',
                   '..#..',
                   '.##..',
                   '.....'],
                  ['.....',
                   '.....',
                   '###..',
                   '#....',
                   '.....'],
                  ['.....',
                   '##...',
                   '.#...',
                   '.#...',
                   '.....'],
                  ['.....',
                   '.....',
                   '..#..',
                   '###..',
                   '.....']]
        }
        
        self.current_piece = self.get_new_piece()
        self.next_piece = self.get_new_piece()
        
    def get_new_piece(self):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ñ–∏–≥—É—Ä—É"""
        shape = random.choice(list(self.tetrominoes.keys()))
        return {
            'shape': shape,
            'rotation': 0,
            'x': self.width // 2 - 2,
            'y': 0
        }
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def get_piece_cells(self, piece):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫ —Ñ–∏–≥—É—Ä—ã"""
        cells = []
        pattern = self.tetrominoes[piece['shape']][piece['rotation']]
        
        for y, row in enumerate(pattern):
            for x, cell in enumerate(row):
                if cell == '#':
                    cells.append((piece['x'] + x, piece['y'] + y))
        return cells
    
    def is_valid_position(self, piece):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        cells = self.get_piece_cells(piece)
        
        for x, y in cells:
            if x < 0 or x >= self.width or y >= self.height:
                return False
            if y >= 0 and self.board[y][x] != 0:
                return False
        return True
    
    def place_piece(self, piece):
        """–†–∞–∑–º–µ—â–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –Ω–∞ –¥–æ—Å–∫–µ"""
        cells = self.get_piece_cells(piece)
        
        for x, y in cells:
            if y >= 0:
                self.board[y][x] = 1
    
    def clear_lines(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏"""
        lines_to_clear = []
        
        for y in range(self.height):
            if all(self.board[y]):
                lines_to_clear.append(y)
        
        for y in lines_to_clear:
            del self.board[y]
            self.board.insert(0, [0 for _ in range(self.width)])
        
        lines_count = len(lines_to_clear)
        if lines_count > 0:
            self.lines_cleared += lines_count
            # –û—á–∫–∏ –∑–∞ –ª–∏–Ω–∏–∏ (–±–æ–ª—å—à–µ –ª–∏–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ = –±–æ–ª—å—à–µ –æ—á–∫–æ–≤)
            points = [0, 100, 300, 500, 800][lines_count] * self.level
            self.score += points
            self.level = self.lines_cleared // 10 + 1
    
    def draw_board(self):
        """–†–∏—Å—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ"""
        self.clear_screen()
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_board = [row[:] for row in self.board]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É –Ω–∞ –¥–æ—Å–∫—É
        if not self.game_over:
            cells = self.get_piece_cells(self.current_piece)
            for x, y in cells:
                if 0 <= y < self.height and 0 <= x < self.width:
                    display_board[y][x] = 2
        
        print('üß± –¢–ï–¢–†–ò–°')
        print('‚îå' + '‚îÄ‚îÄ' * self.width + '‚îê')
        
        for row in display_board:
            line = '‚îÇ'
            for cell in row:
                if cell == 0:
                    line += '  '  # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                elif cell == 1:
                    line += '‚ñà‚ñà'  # –†–∞–∑–º–µ—â—ë–Ω–Ω—ã–π –±–ª–æ–∫
                else:  # cell == 2
                    line += '‚ñì‚ñì'  # –ü–∞–¥–∞—é—â–∏–π –±–ª–æ–∫
            line += '‚îÇ'
            print(line)
        
        print('‚îî' + '‚îÄ‚îÄ' * self.width + '‚îò')
        print(f'–°—á—ë—Ç: {self.score}')
        print(f'–õ–∏–Ω–∏–π: {self.lines_cleared}')
        print(f'–£—Ä–æ–≤–µ–Ω—å: {self.level}')
        print('A/D - –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ | S - —É—Å–∫–æ—Ä–∏—Ç—å –ø–∞–¥–µ–Ω–∏–µ')
        print('W - –ø–æ–≤–æ—Ä–æ—Ç | ESC - –≤—ã—Ö–æ–¥')
    
    def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while not self.game_over:
            try:
                if keyboard.is_pressed('a') or keyboard.is_pressed('left'):
                    self.input_queue.put('left')
                elif keyboard.is_pressed('d') or keyboard.is_pressed('right'):
                    self.input_queue.put('right')
                elif keyboard.is_pressed('s') or keyboard.is_pressed('down'):
                    self.input_queue.put('down')
                elif keyboard.is_pressed('w') or keyboard.is_pressed('up'):
                    self.input_queue.put('rotate')
                elif keyboard.is_pressed('esc'):
                    self.game_over = True
                time.sleep(0.1)
            except:
                pass
    
    def process_input(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥"""
        processed = set()  # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        
        while not self.input_queue.empty():
            try:
                command = self.input_queue.get_nowait()
                if command in processed:
                    continue
                processed.add(command)
                
                new_piece = self.current_piece.copy()
                
                if command == 'left':
                    new_piece['x'] -= 1
                elif command == 'right':
                    new_piece['x'] += 1
                elif command == 'down':
                    new_piece['y'] += 1
                elif command == 'rotate':
                    new_piece['rotation'] = (new_piece['rotation'] + 1) % len(self.tetrominoes[new_piece['shape']])
                
                if self.is_valid_position(new_piece):
                    self.current_piece = new_piece
                    
            except queue.Empty:
                break
    
    def update_game(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
        new_piece = self.current_piece.copy()
        new_piece['y'] += 1
        
        if self.is_valid_position(new_piece):
            self.current_piece = new_piece
        else:
            # –§–∏–≥—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É—Å—Ç–∏—Ç—å—Å—è - —Ä–∞–∑–º–µ—â–∞–µ–º –µ—ë
            self.place_piece(self.current_piece)
            self.clear_lines()
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
            self.current_piece = self.next_piece
            self.next_piece = self.get_new_piece()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
            if not self.is_valid_position(self.current_piece):
                self.game_over = True
    
    def get_fall_speed(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        return max(0.1, 0.8 - (self.level - 1) * 0.1)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        print("üß± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ç—Ä–∏—Å!")
        print("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞—á–∞–ª–∞...")
        input()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        input_thread = Thread(target=self.handle_input, daemon=True)
        input_thread.start()
        
        last_fall = time.time()
        
        while not self.game_over:
            self.draw_board()
            self.process_input()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä
            current_time = time.time()
            if current_time - last_fall > self.get_fall_speed():
                self.update_game()
                last_fall = current_time
            
            time.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
        
        self.clear_screen()
        print("üéÆ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!")
        print(f"üíØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {self.score}")
        print(f"üìè –õ–∏–Ω–∏–π –æ—á–∏—â–µ–Ω–æ: {self.lines_cleared}")
        print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: {self.level}")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        game = TetrisGame()
        game.run()
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥—É–ª—å keyboard: pip install keyboard")

if __name__ == "__main__":
    main()